// 동기와 비동기
// 동기 : 여러개 작업이 있을 때 순서대로 한번에 하나씩 처리하는 방식을 동기적으로 처리한다라고 함.
/*
taskA - taskB - taskC 순서대로 작업을 실행하는 것. : 또 이런것을 쓰레드라고 함.
동기 : 여러개의 작업을 순서대로, 하나씩 처리하는 방식

js은 '동기'적으로 코드를 실행한다.

동기 방식에는 치명적인 단점이 존재한다.

taskA(); 0.1초
taskB(); 0.3초
taskC(); 0.2초
이러면 문제가 안되지만,
taskA(); 0.1초
taskB(); 10초
taskC(); 0.2초
이런식으로 하나의 작업이 오래 걸린다면 쓰레드가 TaskB를 끝내기전에 TaskC를 진행할 수 없기에 전체 프로그램 성능이 악화되는 문제가 발생한다.

자바나 C#에서는 멀티쓰레드 기법을 활용한다.
A쓰레드 TaskA
B쓰레드 TaskB
C쓰레드 TaskC
TaskB가 오래 걸리는 작업이 있어도 해당 작업이 전체프로그램 성능을 악화시키는데 영향을 주지 않아 어느정도 동기 방식의 단점이 보완 가능하다
그러나 js 엔진에는 쓰레드가 1개밖에 없다.

js에서는 비동기라는 방식으로 해결한다.

비동기 : 동기적이지 않다라는 뜻으로 작업을 순서대로 처리하지 않음.

*/
console.log(1);
console.log(3);
// 동기적으로 1, 3 순서대로 출력 됨
console.log(1);
setTimeout(()=> {
    console.log(2);
}, 3000); // 3000초 후에 실행
console.log(3);
// 1출력, setTimeout 함수 실행. 이 함수는 비동기적으로 작동하는 함수로 3초를 세는 타임을 세고 그 다음으로 넘어감
// 3출력, 그리고 3초가 지나면 콜백함수가 실행되어 2가 출력. 비동기적 실행을 볼 수 있음.

// js는 쓰레드가 하나뿐인데 어떻게 동시에 작업을 처리하는건가?
// 비동기 작업들은 자바스크립트 엔진이 아닌 Web APIs에서 실행이 됨.
// Web APIs란 웹 브라우저가 직접 관리하는 별도의 영역
// setTimeout타이머와 같은 비동기 함수가 나오면 wep APIs에 실행해달라고 타이머가 끝나면 실행할 콜백함수와 함께 넘긴다.
// js은 타이머를 기다리지 않고 그 다음 작업을 실행한다. wep Apis의 타이머가 끝나면 콜백함수를 js엔진에 돌려주고 js는 콜백함수를 실행한다.
// 쓰레드가 하나 뿐이지만 여러 작업을 동시에 실행이 가능해진다.

// js엔진이 console.log(1); 실행
// setTimeout()을 실행. 이때 Wep APIs 영역에 위탁을 함. 동시에 콜백함수도 같이 넘김. 
// console.log(3);을 실행
// Wep APIs의 비동기 함수가 끝나면 콜백함수를 돌려주고 js에서 콜백함수를 호출하고 console.log(2); 실행 됨.

